{"ast":null,"code":"import _slicedToArray from \"/home/bruno/code/btfjulio/React/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/bruno/code/btfjulio/React/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/bruno/code/btfjulio/React/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/bruno/code/btfjulio/React/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/bruno/code/btfjulio/React/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/bruno/code/btfjulio/React/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/bruno/code/btfjulio/React/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/bruno/code/btfjulio/React/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\"; // import { selectRandEl } from './helper';\n\nimport Cell from \"./Cell\";\nimport './Board.css'; //  * Properties:\n//  *\n//  * - nrows: number of rows of board\n//  * - ncols: number of cols of board\n//  * - chanceLightStartsOn: float, chance any cell is lit at start of game\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  //  * State:\n  //  *\n  //  * - hasWon: boolean, true when board is all off\n  //  * - board: array-of-arrays of true/false\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //  *\n  //  *    For this board:\n  //  *       .  .  .\n  //  *       O  O  .     (where . is off, and O is on)\n  //  *       .  .  .\n  //  *\n  //  *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n  //  *\n  //  *  This should render an HTML table of individual <Cell /> components.\n  //  *\n  //  *  This doesn't handle any clicks --- clicks are on individual cells\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this2 = this;\n\n      var board = Array.from({\n        length: this.props.nrows\n      }); // TODO: create array-of-arrays of true/false values\n\n      var newBoard = board.map(function (_, idxCol) {\n        return Array.from({\n          length: _this2.props.ncols\n        }).map(function (_, idxRow) {\n          return React.createElement(Cell, {\n            key: \"\".concat(idxCol, \" - \").concat(idxRow),\n            isLit: Math.random() > _this2.props.chanceLightStartsOn,\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(\"\".concat(idxCol, \" - \").concat(idxRow));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          });\n        });\n      });\n      return newBoard;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log(coord);\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x].props.isLit = false;\n        }\n      }\n\n      flipCell(y, x); // TODO: flip this cell and the cells around it\n\n      var hasWon = false; // hasWon = board.map((arr) => arr.every(e => !e)).every(result => result)\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Board = this.state.board;\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, Board.map(function (row) {\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, row);\n      }))); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: .25\n};\nexport default Board;","map":{"version":3,"sources":["/home/bruno/code/btfjulio/React/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","bind","Array","from","length","nrows","newBoard","map","_","idxCol","ncols","idxRow","Math","random","chanceLightStartsOn","flipCellsAround","coord","console","log","split","Number","y","x","flipCell","isLit","setState","row","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\n// import { selectRandEl } from './helper';\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n//  * Properties:\n//  *\n//  * - nrows: number of rows of board\n//  * - ncols: number of cols of board\n//  * - chanceLightStartsOn: float, chance any cell is lit at start of game\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: .25\n  }\n\n//  * State:\n//  *\n//  * - hasWon: boolean, true when board is all off\n//  * - board: array-of-arrays of true/false\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.createBoard = this.createBoard.bind(this)\n  }\n\n//  *\n//  *    For this board:\n//  *       .  .  .\n//  *       O  O  .     (where . is off, and O is on)\n//  *       .  .  .\n//  *\n//  *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n//  *\n//  *  This should render an HTML table of individual <Cell /> components.\n//  *\n//  *  This doesn't handle any clicks --- clicks are on individual cells\n\n\n\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = Array.from({length:this.props.nrows});\n    // TODO: create array-of-arrays of true/false values\n    let newBoard = board.map((_,idxCol) => {\n      return Array.from({length:this.props.ncols}).map((_,idxRow) => {\n        return <Cell \n                  key = {`${idxCol} - ${idxRow}`} \n                  isLit = { Math.random() > this.props.chanceLightStartsOn } \n                  flipCellsAroundMe = {() => this.flipCellsAround(`${idxCol} - ${idxRow}`)}\n                />\n      })\n    })\n    return newBoard\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log(coord)\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x].props.isLit = false\n      }\n    }\n    flipCell(y,x)\n    // TODO: flip this cell and the cells around it\n    let hasWon = false\n    // hasWon = board.map((arr) => arr.every(e => !e)).every(result => result)\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    const Board = this.state.board\n    return (\n      <table className=\"Board\">\n        <tbody>\n          {Board.map((row) => <tr>{row}</tr>)}\n        </tbody>\n      </table>\n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}